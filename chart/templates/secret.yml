{{ if eq .Values.secrets.type "helm" -}}
---
apiVersion: v1
kind: Secret
metadata:
  name: secret
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  auth: {{ .Values.secrets.pushGwAuth }}
  objstore.yml: |-
    type: s3
    config:
      bucket: {{ .Values.secrets.thanosS3Bucket }}
      endpoint: {{ .Values.secrets.thanosS3Endpoint }}
      access_key: {{ .Values.secrets.thanosS3AccessKey }}
      secret_key: {{ .Values.secrets.thanosS3SecretKey }}
  alertmanager.yaml: |-
    global:
      resolve_timeout: 5m
      slack_api_url: {{ .Values.secrets.slackWebHook }}
    inhibit_rules:
    - equal:
      - namespace
      - alertname
      source_matchers:
      - severity = critical
      target_matchers:
      - severity =~ warning|info
    - equal:
      - namespace
      - alertname
      source_matchers:
      - severity = warning
      target_matchers:
      - severity = info
    - equal:
      - namespace
      source_matchers:
      - alertname = InfoInhibitor
      target_matchers:
      - severity = info
    receivers:
    - name: "null"
    - name: slack
      slack_configs:
      - channel: '{{ .Values.slackChannel }}'
        send_resolved: true
        text: '{{ "{{" }} template "slack.default.text" . }}'
        title: Monitoring [{{ "{{" }} .Status | toUpper }}{{ "{{" }} if eq .Status "firing" }}{{ "{{" }} .Alerts.Firing | len }} event(s){{ "{{" }} end }}]
    - name: mail
      email_configs:
      - auth_identity: {{ .Values.mail.username }}
        auth_password: {{ .Values.secrets.mailPassword }}
        auth_username: {{ .Values.mail.username }}
        from: {{ .Values.mail.sender }}
        send_resolved: true
        smarthost: {{ .Values.mail.url }}
        to: {{ .Values.mail.receiver }} 
    route:
      group_by:
      - alertname
      group_interval: 5m
      group_wait: 30s
      receiver: "null"
      repeat_interval: 12h
      routes:
      - matchers:
        - alertname =~ "InfoInhibitor|Watchdog"
        receiver: "null"
      - continue: true
        matchers:
        - severity =~ "critical|high|error|warning"
        receiver: slack
      - continue: true
        matchers:
        - severity =~ "critical|high|error|warning"
        receiver: mail
    templates:
    - /etc/alertmanager/config/*.tmpl
  slack.tmpl: |-
    {{ "{{" }} define "cluster" }}{{ "{{" }} .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ "{{" }} end }}
    {{ "{{" }} define "slack.default.text" }}
    {{ "{{" }}- $root := . -}}
    {{ "{{" }} range .Alerts }}
      `{{ "{{" }} .Labels.severity }}` *{{ "{{" }} .Annotations.summary }}*
      *Details:*
         - Alertname: `{{ "{{" }} .Labels.alertname }}`
         - Entity: `{{ "{{" }} .Labels.entity }}`
         - Label_name: `{{ "{{" }} .Labels.label_name }}`
         - Severity: `{{ "{{" }} .Labels.severity }}`
    {{ "{{" }} end }}
    {{ "{{" }} end }}
  GF_SECURITY_ADMIN_PASSWORD: {{ .Values.thanos.grafanaAdminPassword }}
  grafana.ini: |
    [auth.google]
    allow_sign_up = true
    allowed_domains = {{ .Values.secrets.grafanaAllowedDomains }}
    api_url = https://www.googleapis.com/oauth2/v1/userinfo
    auth_url = https://accounts.google.com/o/oauth2/auth
    client_id = {{ .Values.grafana.clientId }}
    client_secret = {{ .Values.secrets.grafanaClientSecret }}
    enabled = true
    scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
    token_url = https://accounts.google.com/o/oauth2/token
    [dashboards]
    default_home_dashboard_path = /etc/grafana/provisioning/dashboards/default.json
    [server]
    domain = {{ .Values.grafana.domain }}
    root_url = https://{{ .Values.grafana.domain }}/
    [users]
    default_theme = light
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - access: proxy
      name: Thanos
      type: prometheus
      uid: P5DCFC7561CCDE821
      url: http://thanos-query:9090
{{ end }}


{{ if eq .Values.secrets.type "vault" -}}
---
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: {{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
spec:
  provider:
    vault:
      server: {{ .Values.secrets.vaultUrl }}
      path: "kv"
      version: "v2"
      auth:
        tokenSecretRef:
          name: {{ .Values.secrets.tokenName }}
          key: token
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
spec:
  secretStoreRef:
    name: {{ .Release.Namespace }}
    kind: ClusterSecretStore
  target:
    name: secret
  data:
    - secretKey: auth
      remoteRef:
        key: {{ .Values.secrets.vaultPath }}/PUSHGW_PASSWORD_HTPASSWD
        property: value
    - secretKey: objstore.yml
      remoteRef:
        key: {{ .Values.secrets.vaultPath }}/objstore.yml
        property: objstore.yml
    - secretKey: alertmanager.yaml
      remoteRef:
        key: {{ .Values.secrets.vaultPath }}/alertmanager.yaml
        property: alertmanager.yaml
    - secretKey: slack.tmpl
      remoteRef:
        key: {{ .Values.secrets.vaultPath }}/slack.tmpl
        property: slack.tmpl
    - secretKey: GF_SECURITY_ADMIN_PASSWORD
      remoteRef:
        key: {{ .Values.secrets.vaultPath }}/GRAFANA_PASSWORD
        property: value
    - secretKey: grafana.ini
      remoteRef:
        key: {{ .Values.secrets.vaultPath }}/grafana.ini
        property: grafana.ini
    - secretKey: datasources.yaml
      remoteRef:
        key: {{ .Values.secrets.vaultPath }}/datasources.yaml
        property: datasources.yaml
{{ end }}