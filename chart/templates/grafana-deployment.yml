apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana
    argocd.argoproj.io/instance: grafana
  name: grafana
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/name: grafana
  template:
    metadata:
      labels:
        checksum-config: {{ include (print $.Template.BasePath "/secret.yml") . | sha256sum | trimSuffix "-" | trunc 63 }}
        app.kubernetes.io/instance: grafana
        app.kubernetes.io/name: grafana
    spec:
      automountServiceAccountToken: true
      containers:
        - env:
            - name: GF_SECURITY_ADMIN_USER
              value: {{ .Values.grafana.adminUsername }}
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: GF_SECURITY_ADMIN_PASSWORD
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          image: 'grafana/grafana:10.2.2'
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          name: grafana
          ports:
            - containerPort: 3000
              name: grafana
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          resources:
            limits:
              memory: 150Mi
            requests:
              cpu: 30m
              memory: 30Mi
          volumeMounts:
            - mountPath: /etc/grafana
              name: grafana-ini
            - mountPath: /etc/grafana/provisioning/datasources/
              name: grafana-datasource

{{- if or (eq .Values.grafana.dashboards.feEnabled "default") (eq .Values.grafana.dashboards.feEnabled "true") }}
            - name: dashboard-fe
              mountPath: /etc/grafana/provisioning/dashboards/{{- if eq .Values.grafana.dashboards.feEnabled "default" }}default.json{{ else }}dashboard-fe.json{{ end }}
              subPath: dashboard-fe.json
{{ end }}
{{- if or (eq .Values.grafana.dashboards.nodeExporterEnabled "default") (eq .Values.grafana.dashboards.nodeExporterEnabled "true") }}
            - name: dashboard-node-exporter
              mountPath: /etc/grafana/provisioning/dashboards/{{- if eq .Values.grafana.dashboards.nodeExporterEnabled "default" }}default.json{{ else }}dashboard-node-exporter.json{{ end }}
              subPath: dashboard-node-exporter.json
{{ end }}
{{- if or (eq .Values.grafana.dashboards.rempEnabled "default") (eq .Values.grafana.dashboards.rempEnabled "true") }}
            - name: dashboard-remp
              mountPath: /etc/grafana/provisioning/dashboards/{{- if eq .Values.grafana.dashboards.rempEnabled "default" }}default.json{{ else }}dashboard-remp.json{{ end }}
              subPath: dashboard-remp.json
{{ end }}
{{- if or (eq .Values.grafana.dashboards.systemEnabled "default") (eq .Values.grafana.dashboards.systemEnabled "true") }}
            - name: dashboard-system
              mountPath: /etc/grafana/provisioning/dashboards/{{- if eq .Values.grafana.dashboards.systemEnabled "default" }}default.json{{ else }}dashboard-system.json{{ end }}
              subPath: dashboard-system.json
{{ end }}
{{- if or (eq .Values.grafana.dashboards.telegramEnabled "default") (eq .Values.grafana.dashboards.telegramEnabled "true") }}
            - name: dashboard-telegram
              mountPath: /etc/grafana/provisioning/dashboards/{{- if eq .Values.grafana.dashboards.telegramEnabled "default" }}default.json{{ else }}dashboard-telegram.json{{ end }}
              subPath: dashboard-telegram.json
{{ end }}
{{- if or (eq .Values.grafana.dashboards.wpEnabled "default") (eq .Values.grafana.dashboards.wpEnabled "true") }}
            - name: dashboard-wp
              mountPath: /etc/grafana/provisioning/dashboards/{{- if eq .Values.grafana.dashboards.wpEnabled "default" }}default.json{{ else }}dashboard-wp.json{{ end }}
              subPath: dashboard-wp.json
{{ end }}
      enableServiceLinks: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      serviceAccountName: grafana
      volumes:
        - configMap:
            name: grafana
          name: grafana
        - name: grafana-ini
          secret:
            secretName: secret
            items:
              - key: "grafana.ini"
                path: "grafana.ini"
        - name: grafana-datasource
          secret:
            secretName: grafana-datasource
            items:
              - key: "datasources.yaml"
                path: "datasources.yaml"

{{- if or (eq .Values.grafana.dashboards.feEnabled "default") (eq .Values.grafana.dashboards.feEnabled "true") }}
        - name: dashboard-fe
          configMap:
            name: dashboard-fe
{{ end }}
{{- if or (eq .Values.grafana.dashboards.nodeExporterEnabled "default") (eq .Values.grafana.dashboards.nodeExporterEnabled "true") }}
        - name: dashboard-node-exporter
          configMap:
            name: dashboard-node-exporter
{{ end }}
{{- if or (eq .Values.grafana.dashboards.rempEnabled "default") (eq .Values.grafana.dashboards.rempEnabled "true") }}
        - name: dashboard-remp
          configMap:
            name: dashboard-remp
{{ end }}
{{- if or (eq .Values.grafana.dashboards.systemEnabled "default") (eq .Values.grafana.dashboards.systemEnabled "true") }}
        - name: dashboard-system
          configMap:
            name: dashboard-system
{{ end }}
{{- if or (eq .Values.grafana.dashboards.telegramEnabled "default") (eq .Values.grafana.dashboards.telegramEnabled "true") }}
        - name: dashboard-telegram
          configMap:
            name: dashboard-telegram
{{ end }}
{{- if or (eq .Values.grafana.dashboards.wpEnabled "default") (eq .Values.grafana.dashboards.wpEnabled "true") }}
        - name: dashboard-wp
          configMap:
            name: dashboard-wp
{{ end }}
