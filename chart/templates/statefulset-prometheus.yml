apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    release: {{ $helmMonitorie.name }}
  name: prometheus
  namespace: {{ .Release.Namespace }}
spec:
  podManagementPolicy: Parallel
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/name: prometheus
  serviceName: prometheus
  template:
    spec:
      automountServiceAccountToken: true
      containers:
        - args:
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--storage.tsdb.retention.time=10d'
            - '--config.file=/etc/prometheus/config_out/prometheus.env.yaml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.enable-lifecycle'
            - >-
              --web.external-url=http://prometheus.{{ .Release.Namespace }}:9090
            - '--web.route-prefix=/'
            - '--no-storage.tsdb.wal-compression'
            - '--web.config.file=/etc/prometheus/web_config/web-config.yaml'
            - '--storage.tsdb.max-block-duration=2h'
            - '--storage.tsdb.min-block-duration=2h'
          image: 'quay.io/prometheus/prometheus:v2.40.5'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /-/healthy
              port: http-web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          name: prometheus
          ports:
            - containerPort: 9090
              name: http-web
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: http-web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 400m
              memory: 500Mi
            requests:
              cpu: 150m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /-/ready
              port: http-web
              scheme: HTTP
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /etc/prometheus/config_out
              name: config-out
              readOnly: true
            - mountPath: /etc/prometheus/certs
              name: tls-assets
              readOnly: true
            - mountPath: /prometheus
              name: prometheus-db
            - mountPath: >-
                /etc/prometheus/rules/prometheus-rulefiles-0
              name: prometheus-rulefiles-0
            - mountPath: /etc/prometheus/web_config/web-config.yaml
              name: web-config
              readOnly: true
              subPath: web-config.yaml
        - args:
            - '--listen-address=:8080'
            - '--reload-url=http://127.0.0.1:9090/-/reload'
            - '--config-file=/etc/prometheus/config/prometheus.yaml.gz'
            - >-
              --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
            - >-
              --watched-dir=/etc/prometheus/rules/prometheus-rulefiles-0
          command:
            - /bin/prometheus-config-reloader
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: SHARD
              value: '0'
          image: 'quay.io/prometheus-operator/prometheus-config-reloader:v0.67.1'
          imagePullPolicy: IfNotPresent
          name: config-reloader
          ports:
            - containerPort: 8080
              name: reloader-web
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /etc/prometheus/config
              name: config
            - mountPath: /etc/prometheus/config_out
              name: config-out
            - mountPath: >-
                /etc/prometheus/rules/prometheus-rulefiles-0
              name: prometheus-rulefiles-0
        - args:
            - sidecar
            - '--prometheus.url=http://127.0.0.1:9090/'
            - >-
              --prometheus.http-client={"tls_config":
              {"insecure_skip_verify":true}}
            - '--grpc-address=:10901'
            - '--http-address=:10902'
            - '--objstore.config=$(OBJSTORE_CONFIG)'
            - '--tsdb.path=/prometheus'
            - '--log.level=info'
            - '--log.format=logfmt'
          env:
            - name: OBJSTORE_CONFIG
              valueFrom:
                secretKeyRef:
                  key: objstore.yml
                  name: thanos-objectstorage
          image: 'quay.io/thanos/thanos:v0.32.2'
          imagePullPolicy: IfNotPresent
          name: thanos-sidecar
          ports:
            - containerPort: 10902
              name: http
              protocol: TCP
            - containerPort: 10901
              name: grpc
              protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /prometheus
              name: prometheus-db
      dnsPolicy: ClusterFirst
      initContainers:
        - args:
            - '--watch-interval=0'
            - '--listen-address=:8080'
            - '--config-file=/etc/prometheus/config/prometheus.yaml.gz'
            - >-
              --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
            - >-
              --watched-dir=/etc/prometheus/rules/prometheus-rulefiles-0
          command:
            - /bin/prometheus-config-reloader
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: SHARD
              value: '0'
          image: 'quay.io/prometheus-operator/prometheus-config-reloader:v0.61.1'
          imagePullPolicy: IfNotPresent
          name: init-config-reloader
          ports:
            - containerPort: 8080
              name: reloader-web
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 50Mi
            requests:
              cpu: 200m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /etc/prometheus/config
              name: config
            - mountPath: /etc/prometheus/config_out
              name: config-out
            - mountPath: >-
                /etc/prometheus/rules/prometheus-rulefiles-0
              name: prometheus-rulefiles-0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 2000
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccount: sys-monitoring-kube-promet-prometheus
      serviceAccountName: sys-monitoring-kube-promet-prometheus
      terminationGracePeriodSeconds: 600
      volumes:
        - name: config
          secret:
            defaultMode: 420
            secretName: prometheus
        - name: tls-assets
          projected:
            defaultMode: 420
            sources:
              - secret:
                  name: >-
                    prometheus-tls-assets-0
        - emptyDir: {}
          name: config-out
        - configMap:
            defaultMode: 420
            name: prometheus-rulefiles-0
          name: prometheus-rulefiles-0
        - name: web-config
          secret:
            defaultMode: 420
            secretName: prometheus-web-config
        - emptyDir: {}
          name: prometheus-db
  updateStrategy:
    type: RollingUpdate
